#RSA  Rivest, Shamir, Adleman
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import padding

def generate_rsa_key_pair():
    # Generate RSA key pair
    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048,
        backend=default_backend()
    )
    public_key = private_key.public_key()

    return private_key, public_key

def save_key_to_file(key, filename):
    # Save key to file
    with open(filename, "wb") as key_file:
        key_data = key.private_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PrivateFormat.TraditionalOpenSSL,
            encryption_algorithm=serialization.NoEncryption()
        )
        key_file.write(key_data)

def load_key_from_file(filename):
    # Load key from file
    with open(filename, "rb") as key_file:
        key_data = key_file.read()
        key = serialization.load_pem_private_key(
            key_data,
            password=None,
            backend=default_backend()
        )
        return key

def rsa_encrypt(public_key, plaintext):
    # Encrypt the plaintext using RSA public key
    ciphertext = public_key.encrypt(
        plaintext.encode(),
        padding.OAEP(
            mgf=padding.MGF1(algorithm=padding.SHA256()),
            algorithm=padding.SHA256(),
            label=None
        )
    )
    return ciphertext

def rsa_decrypt(private_key, ciphertext):
    # Decrypt the ciphertext using RSA private key
    plaintext = private_key.decrypt(
        ciphertext,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=padding.SHA256()),
            algorithm=padding.SHA256(),
            label=None
        )
    )
    return plaintext.decode()

# Example usage
plaintext = "Hello, RSA!"

# Generate RSA key pair
private_key, public_key = generate_rsa_key_pair()

# Save private key to file (optional)
save_key_to_file(private_key, "private_key.pem")

# Save public key to file (optional)
save_key_to_file(public_key, "public_key.pem")

# Encrypt with the public key
ciphertext = rsa_encrypt(public_key, plaintext)
print("Encrypted Text:", ciphertext)

# Decrypt with the private key
decrypted_text = rsa_decrypt(private_key, ciphertext)
print("Decrypted Text:", decrypted_text)
