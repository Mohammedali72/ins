#Deffie Hellman
from cryptography.hazmat.primitives.asymmetric import dh
from cryptography.hazmat.backends import default_backend

def generate_dh_parameters():
    # Generate Diffie-Hellman parameters
    parameters = dh.generate_parameters(generator=2, key_size=2048, backend=default_backend())
    return parameters

def generate_dh_key_pair(parameters):
    # Generate a Diffie-Hellman key pair
    private_key = parameters.generate_private_key()
    public_key = private_key.public_key()
    return private_key, public_key

def perform_dh_key_exchange(private_key, peer_public_key):
    # Perform the Diffie-Hellman key exchange
    shared_key = private_key.exchange(peer_public_key)
    return shared_key

# Example usage
# Alice's side
alice_parameters = generate_dh_parameters()
alice_private_key, alice_public_key = generate_dh_key_pair(alice_parameters)

# Bob's side
bob_parameters = generate_dh_parameters()
bob_private_key, bob_public_key = generate_dh_key_pair(bob_parameters)

# Alice and Bob exchange public keys
alice_shared_key = perform_dh_key_exchange(alice_private_key, bob_public_key)
bob_shared_key = perform_dh_key_exchange(bob_private_key, alice_public_key)

# The shared keys should be the same on both sides
print("Shared Key (Alice):", alice_shared_key)
print("Shared Key (Bob):", bob_shared_key)
print("Shared Keys Match:", alice_shared_key == bob_shared_key)
